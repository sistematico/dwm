#################################
#          Animations           #
#################################
transition-length = 300
transition-pow-x = 0.1
transition-pow-y = 0.1
transition-pow-w = 0.1
transition-pow-h = 0.1
size-transition = true

#################################
#             Corners           #
#################################
corner-radius = 7.0;
rounded-corners-exclude = [
  "class_g = 'dwm'",
  "class_g = 'dmenu'",
  "class_g = 'awesome'",
  "class_g = 'Dunst'",
  "class_g = 'URxvt'",
  "class_g = 'XTerm'",
  "class_g = 'kitty'",
  "class_g = 'Alacritty'",
  "class_g = 'Polybar'",
  "class_g = 'code-oss'",
  "class_g = 'Thunderbird'"
];
round-borders = 1;
round-borders-exclude = [];

#################################
#             Shadows           #
#################################
shadow = true;
shadow-radius = 7;
shadow-opacity = .70;
shadow-offset-x = 5;
shadow-offset-y = 5;
# no-dock-shadow = false
# no-dnd-shadow = false

# shadow-red = 0
# shadow-green = 0
# shadow-blue = 0

# shadow-ignore-shaped = ''
shadow-exclude = [
  "name = 'Notification'",
  "class_g = 'Conky'",
  "class_g ?= 'Notify-osd'",
  "class_g = 'Cairo-clock'",
  "class_g = 'slop'",
  "class_g = 'Polybar'",
  "class_g = 'firefox' && window_type = 'utility'",
  "_GTK_FRAME_EXTENTS@:c"
];

# shadow-exclude-reg = "" 
# xinerama-shadow-crop = false

#################################
#           Fading              #
#################################
fading = true;
fade-in-step = 0.06;
fade-out-step = 0.04;
fade-delta = 10

fade-exclude = [
  "class_g = 'slop'",
  "class_g = 'maim'"
]

# no-fading-openclose = false
# no-fading-destroyed-argb = false

#################################
#   Transparency / Opacity      #
#################################
inactive-opacity = 0.8;
frame-opacity = 0.7;
# menu-opacity = 1.0 
# menu-opacity is depreciated use dropdown-menu and popup-menu instead.

popup_menu = { opacity = 0.8; }
dropdown_menu = { opacity = 0.8; }

inactive-opacity-override = false;

active-opacity = 1.0;
# inactive-dim = 0.0

# Specify a list of conditions of windows that should always be considered focused.
focus-exclude = [
  "class_g = 'Cairo-clock'",
  "class_g = 'Bar'",                    # lemonbar
  "class_g = 'slop'"                    # maim
];

# inactive-dim-fixed = 1.0

opacity-rule = [
  "80:class_g     = 'Bar'",             # lemonbar
  "100:class_g    = 'slop'",            # maim
  "100:class_g    = 'XTerm'",
  "100:class_g    = 'URxvt'",
  "100:class_g    = 'kitty'",
  "100:class_g    = 'Alacritty'",
  "80:class_g     = 'Polybar'",
  "100:class_g    = 'code-oss'",
  "100:class_g    = 'Meld'",
  "100:class_g    = 'TelegramDesktop'",
  "90:class_g     = 'Joplin'",
  "100:class_g    = 'firefox'",
  "100:class_g    = 'Thunderbird'"
];

#################################
#     Background-Blurring       #
#################################
# blur-method = 
# blur-size = 12
# blur-deviation = false
# blur-background = true;
# blur-background-frame = false;

# Use fixed blur strength rather than adjusting according to window opacity.
# blur-background-fixed = false;

# Specify the blur convolution kernel, with the following format:
# example:
#   blur-kern = "5,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1";
#
# blur-kern = ''
# blur-kern = "3x3box";

blur: {
  # method = "gaussian";
  # method = "kernel";
  # method = "kawase";
  method = "dual_kawase";
  # size = 10;
  # strength = 3;
  # deviation = 1.0;
  # deviation = 3.0;
  #kernel = "11x11gaussian";
  background = false;
  background-frame = false;
  background-fixed = false;
  kern = "3x3box";
}

# Exclude conditions for background blur.
blur-background-exclude = [
  #"window_type = 'dock'",
  #"window_type = 'desktop'",
  #"class_g = 'URxvt'",
  "class_g = 'slop'",
  "_GTK_FRAME_EXTENTS@:c"
];


#################################
#       General Settings        #
#################################
# daemon = false
# Specify the backend to use: `xrender`, `glx`, or `xr_glx_hybrid`.
# `xrender` is the default one.
experimental-backends = true;
backend = "glx";
vsync = false;
# dbus = false
mark-wmwin-focused = true;
mark-ovredir-focused = true;
detect-rounded-corners = true;
detect-client-opacity = true;
refresh-rate = 0;
# sw-opti = 
# use-ewmh-active-win = false
# unredir-if-possible = false
# unredir-if-possible-delay = 0
# unredir-if-possible-exclude = []
detect-transient = true;
detect-client-leader = true;

# Resize damaged region by a specific number of pixels. 
# A positive value enlarges it while a negative one shrinks it. 
# If the value is positive, those additional pixels will not be actually painted 
# to screen, only used in blur calculation, and such. (Due to technical limitations, 
# with use-damage, those pixels will still be incorrectly painted to screen.) 
# Primarily used to fix the line corruption issues of blur, 
# in which case you should use the blur radius value here 
# (e.g. with a 3x3 kernel, you should use `--resize-damage 1`, 
# with a 5x5 one you use `--resize-damage 2`, and so on). 
# May or may not work with *--glx-no-stencil*. Shrinking doesn't function correctly.
#
# resize-damage = 1

# Specify a list of conditions of windows that should be painted with inverted color. 
# Resource-hogging, and is not well tested.
#
# invert-color-include = []

# GLX backend: Avoid using stencil buffer, useful if you don't have a stencil buffer. 
# Might cause incorrect opacity when rendering transparent content (but never 
# practically happened) and may not work with blur-background. 
# My tests show a 15% performance boost. Recommended.
#
# glx-no-stencil = false

# GLX backend: Avoid rebinding pixmap on window damage. 
# Probably could improve performance on rapid window content changes, 
# but is known to break things on some drivers (LLVMpipe, xf86-video-intel, etc.).
# Recommended if it works.
#
# glx-no-rebind-pixmap = false

# Disable the use of damage information. 
# This cause the whole screen to be redrawn everytime, instead of the part of the screen
# has actually changed. Potentially degrades the performance, but might fix some artifacts.
# The opposing option is use-damage
#
# no-use-damage = false
#use-damage = true (Causing Weird Black semi opaque rectangles when terminal is opened)
#Changing use-damage to false fixes the problem
use-damage = false;

# Use X Sync fence to sync clients' draw calls, to make sure all draw 
# calls are finished before picom starts drawing. Needed on nvidia-drivers 
# with GLX backend for some users.
#
# xrender-sync-fence = false

# GLX backend: Use specified GLSL fragment shader for rendering window contents. 
# See `compton-default-fshader-win.glsl` and `compton-fake-transparency-fshader-win.glsl` 
# in the source tree for examples.
#
# glx-fshader-win = ''

# Force all windows to be painted with blending. Useful if you 
# have a glx-fshader-win that could turn opaque pixels transparent.
#
# force-win-blend = false

# no-ewmh-fullscreen = false
# max-brightness = 1.0
# transparent-clipping = false

#  "trace", "debug", "info", "warn", "error"
log-level = "error";
# log-file = '/path/to/your/log/file'
# show-all-xerrors = false
# write-pid-path = '/path/to/your/log/file'

wintypes:
{
  normal = { fade = false; shadow = false; }
  tooltip = { fade = true; shadow = false; opacity = 0.75; focus = true; full-shadow = false; };
  dock = { shadow = false; }
  dnd = { shadow = false; }
  popup_menu = { opacity = 0.8; shadow = false; }
  dropdown_menu = { opacity = 0.8; shadow = false; }
};
